/*
 * moutis_behaviors.dtsi
 *
 * SPDX-License-Identifier: MIT
 *
 */
 

#define     my_hrm_config \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            flavor = "balanced"; \
            hold-trigger-on-release; \
            tapping-term-ms = <my_tapping_term>; \
            quick-tap-ms = <my_quick_tapping_term>

#define     my_lt_config \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            flavor = "tap-preferred"; \
            hold-trigger-on-release; \
            hold-while-undecided-linger; \
            tapping-term-ms = <my_tapping_term>; \
            quick-tap-ms = <my_quick_tapping_term>

#define     my_lk_config \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            tapping-term-ms = <my_tapping_term>; \
            flavor = "tap-preferred"

        skapp: sticky_key_app_switcher {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <900>;
        };

#define rst_btld reset_bootldr 0 0 // simple macro to keep the keymap uncluttered
         reset_bootldr: reset_bootldr { // tap for reset, hold for bootloader
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <500>;    // hold 0.5 seconds (Nice!Nano double-tap reset timing)
            flavor = "tap-preferred";
            bindings = <&bootloader>, <&sys_reset>;
        };

//
// home row mods
//

        hm: homerow_mods { // use on either hand
            my_hrm_config;
            bindings = <&kp>, <&kp>;
        };
        hmr: homerow_mods_right { // use on right hand to mod left
            my_hrm_config;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
        };
        hml: homerow_mods_left { // use on left hand to mod right
            my_hrm_config;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>; // right hand allowed
        };
//
// maybe should be separated? but here for now...
//
// these because we can't use macro/behavior in mt parameter?
//
        mt_S: mt_S {
            my_hrm_config;
            bindings = <&kp>, <&ak_S>;
            hold-trigger-key-positions = <KEYS_R THUMBS>; // right hand allowed
        };
        mt_C: mt_C {  // C is on RIGHT hand in Pm, so it has no restriction
            my_hrm_config;
            bindings = <&kp>, <&ak_C>;
//            hold-trigger-key-positions = <KEYS_R THUMBS>; // right hand allowed
        };
        mt_N: mt_N {
            my_hrm_config;
            bindings = <&kp>, <&ak_N>;
            hold-trigger-key-positions = <KEYS_R THUMBS>; // right hand allowed
        };
        mt_T: mt_T {
            my_hrm_config;
            bindings = <&kp>, <&ak_T>;
            hold-trigger-key-positions = <KEYS_R THUMBS>; // right hand allowed
        };
        mt_D: mt_D {  // Onldy AU (Gold) has D on home
            my_hrm_config;
            bindings = <&kp>, <&ak_D>;
            hold-trigger-key-positions = <KEYS_R THUMBS>; // right hand allowed
        };
        mt_A: mt_A {
            my_hrm_config;
            bindings = <&kp>, <&ak_A>;
            hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
       };
        mt_E: mt_E {
            my_hrm_config;
            bindings = <&kp>, <&ak_E>;
            hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
        };
        mt_I: mt_I {
            my_hrm_config;
            bindings = <&kp>, <&ak_I>;
            hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
        };
        mt_H: mt_H {
            my_hrm_config;
            bindings = <&kp>, <&ak_H>;
            hold-trigger-key-positions = <KEYS_L THUMBS>; // right hand allowed
        };
        mt_M: mt_M {        // M on right pinky in Rhodium
            my_hrm_config;
            bindings = <&kp>, <&ak_M>;
            hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
        };
        lt_R: lt_R {
            my_lt_config;
            bindings = <&mo>, <&ak_R>;
        };
        lt_BSPC: lt_BSPC {
            my_lt_config;
            bindings = <&mo>, <&mm_BspcDel>;
        };

/*
 * modmorph behaviors
 * identified by the camel case of each of the keycodes
 */
        DotColn: DotColn {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        DotColnJ: DotColnJ { // no adaptive Japanese
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        SlshStar: SlshStar {  // shift = *, alt = backslash
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&SlshBslh>, <&kp STAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        SlshBslh: SlshBslh {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        SlshStarJ: SlshStarJ { // no adaptive Japanese
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp STAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        HashDllr: HashDllr {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_HASH>, <&kp DLLR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        MinusPlus: MinusPlus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        QuesExcl: QuesExcl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mm_BspcDel: mm_BspcDel { // layer-tap mod-morph
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_BSPC>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        }; 
        LTLTE: LTLTE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp RA(COMMA)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        GTGTE: GTGTE{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp GT>, <&kp RA(DOT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };


        ak_BSPC: ak_BSPC {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp BSPC>;

            ak_BSPC_U { trigger-keys = <A>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp U>; };
            ak_BSPC_A { trigger-keys = <U>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp A>; };
            ak_BSPC_O { trigger-keys = <E>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp O>; };
            ak_BSPC_E { trigger-keys = <O>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp E>; };
        };

        ak_DOT: ak_DOT {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&sl_dot>;

            ak_DOT_EXCL { trigger-keys = <FSLH>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp BSPC  &kp EXCL>; };
        };
        ak_FSLH: ak_FSLH {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp FSLH>;

            ak_FSLH_U { trigger-keys = <A>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp U>; };
        };
        ak_DQT: ak_DQT {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp DQT>;

            ak_DQT_Q { trigger-keys = <FSLH>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp BSPC  &kp QMARK>; };
        };
        ak_SQT: ak_SQT {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp SQT>;

            ak_SQT_Q { trigger-keys = <FSLH>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp BSPC  &kp S_INVQ>; };
            ak_SQT_A { trigger-keys = <U>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp A>; };
            ak_SQT_U { trigger-keys = <A>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp U>; };
        };

 ak_HASH: ak_HASH {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp HASH>;

        ak_HASH_INVX { trigger-keys = <FSLH>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp BSPC &kp S_INVX>; };
        };


/*
 *  &CommaMagic (put just this in the keymap)
 *
 *  Then you'll need to add an behavior-adaptive-key for every alpha in place of
 *  the alpha. For example:
 *
 *  instead of &KP A in the keymap, use &ak_A and a behavior def:
 *
 *      ak_A: ak_A {
 *          compatible = "zmk,behavior-adaptive-key";
 *          #binding-cells = <0>;
 *          bindings = <&kp A>;
 *          akA_Cap { trigger-keys = <CMMA>; max-prior-idle-ms = <my_cc_term>; bindings = <&kp BSPC &kp LS(A)>; };
 *      };
 *
 *  It works flawlessly for me. Your mileage may vary
 */
#define CommaMagic CmmaMgc CAPSLOCK 0   // simple macro to keep the keymap uncluttered

        CmmaMgc: CmmaMgc {  // Hold for CAPSLOCK, tap for COMMA
            my_lk_config;
            bindings = <&kp>, <&CmmaSemi>;
        };
        CmmaSemi: CmmaSemi { // press = COMMA,shift = Semicolon
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_CMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ak_CMMA: ak_CMMA { // double-tap comma = caps_word
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp CMMA>;
            ak_CMMA_cap { trigger-keys = <CMMA>; max-prior-idle-ms = <my_cc_term>; bindings = <&kp BSPC  &caps_word>; };
        // optional alt fingering to eliminate SFBs in vowel block on HD Neu layout variations
            ak_CMMA_O { trigger-keys = <E>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp O>; };
            ak_CMMA_E { trigger-keys = <O>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp E>; };
        };

/*
 * lk_ linger key behaviors (approximated via hold-tap)
 * most require a combo to execute the multiple key taps
 */
        lk: lk {    // a generic linger behavior
            my_lk_config;
            bindings = <&kp>, <&kp>;
        };

        lk_qu: lk_qu {
            my_lk_config;
            bindings = <&kp>, <&t_Qu>;
        };

#define lk_LRDquote lk_Dquot RBRC LBRC   // simply put &lk_LRDquote in the keymap
        lk_Dquot: lk_Dquot {            // " on tap, “” on "linger" (curly quotes)
            my_lk_config;
            bindings = <&t_pairDquo>, <&kp>;
        };
#define lk_LRpar lk_par RPAR LPAR       // simply put &lk_LRpar in the keymap
        lk_par: lk_par {                // ( on tap, () on "linger"
            my_lk_config;
            bindings = <&t_pairPar>, <&kp>;
        };
#define lk_LRbkt lk_bkt RBKT LBKT       // simply put &lk_LRbkt in the keymap
        lk_bkt: lk_bkt {                // [ on tap, [] on "linger"
            my_lk_config;
            bindings = <&t_pairBkt>, <&kp>;
        };
#define lk_LRbrc lk_brc RBRC LBRC       // simply put &lk_LRbrc in the keymap
        lk_brc: lk_brc {                //
            my_lk_config;
            bindings = <&t_pairBrc>, <&kp>;
        };
#define lk_LRltgt lk_ltgt GT LT         // simply put &lk_LRltgt in the keymap
        lk_ltgt: lk_ltgt {              // < on tap, <|> on "linger"
            my_lk_config;
            bindings = <&t_pairLtGt>, <&kp>;
        };


        lk_th: lk_th { // Th on tap, tion on "linger"
            my_lk_config;
            bindings = <&t_tion>, <&t_Th>;
        };
        lk_sh: lk_sh { // Sh on tap, sion on "linger"
            my_lk_config;
            bindings = <&t_sion>, <&t_Sh>;
        };
        lk_gh: lk_gh { // Gh on tap, Ght on "linger"
            my_lk_config;
            bindings = <&t_ght>, <&t_Gh>;
        };



